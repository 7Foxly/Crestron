/*
System Name:TCP_IP_CLIENT
Programmer:Nathan Hesson
Comments:See the HELP Section
*/
#SYMBOL_NAME "TCP_IP_CLIENT"
#CATEGORY "46" "TCPIP" // Custom
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#OUTPUT_SHIFT 2
#HELP_BEGIN
   This module duplicates what a Simpl Windows TCP/IP Client does.  The only difference is that you don't need an entry in the IP Table
#HELP_END

DIGITAL_INPUT _SKIP_, _SKIP_, CLIENT_CONNECT;
STRING_INPUT CLIENT_TX$[255];
DIGITAL_OUTPUT CLIENT_CONNECT_F; 
ANALOG_OUTPUT CLIENT_STATUS;
STRING_OUTPUT CLIENT_RX$;

STRING_PARAMETER Address[255];

INTEGER_PARAMETER Port;

#BEGIN_PARAMETER_PROPERTIES Address
	PropValidUnits = UnitString;
	PropDefaultValue = "";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Port
	PropValidUnits = UnitDecimal;
	PropDefaultValue = 80d;
#END_PARAMETER_PROPERTIES

TCP_CLIENT CLIENT[255];

PUSH CLIENT_CONNECT
{
	SocketConnectClient(CLIENT, Address, Port, 1);
}

RELEASE CLIENT_CONNECT
{
	SocketDisconnectClient(CLIENT);
}

CHANGE CLIENT_TX$
{
	SocketSend(CLIENT, CLIENT_TX$);
}

SOCKETCONNECT CLIENT
{
	CLIENT_CONNECT_F = 1;
}

SOCKETDISCONNECT CLIENT
{
	CLIENT_CONNECT_F = 0;
}

SOCKETSTATUS CLIENT
{
	CLIENT_STATUS = SocketGetStatus();
}

SOCKETRECEIVE CLIENT
{
	CLIENT_RX$ = CLIENT.SocketRxBuf;
	ClearBuffer(CLIENT.SocketRxBuf);

}

FUNCTION MAIN() {
	CLIENT_CONNECT_F = 0;
}
